#ifndef GROUPER_HH
#define GROUPER_HH

#include <iostream>
#include <vector>
#include <cmath>
#include <fstream> 

#include "TFile.h"
#include "TF1.h"
#include "TH1F.h"
#include "TH2D.h"
#include "TTree.h"
#include "TProfile.h"
#include "TGraph.h"
#include "TCanvas.h"
#include "TTreeReader.h"
#include "TTreeReaderValue.h"
#include "TTreeReaderArray.h"
#include "TRandom.h"

#include "../../../lib/SignalDict/Signal.h"
#include "Detectors.hh"

#include "/home/local1/Documents/lib/GTools1.0/include/GString.hh"

using namespace std;

int Verbose = 0;
int Run;

pair<double, double> detectorCleaning[SIGNAL_MAX];

double Event = 0;
int counterraph[BETA_SIZE + 1];

string ROOT_filename;
string ROOT_basefilename;

TFile *GROUPED_File;
TTree *Tree_Grouped;
int Tree_Event;
vector<Signal> Tree_Silicon;
vector<Signal> Tree_SiPMHigh;
vector<Signal> Tree_SiPMLow;

TFile *File_Cleaned;
TTree *Tree_Cleaned;
int Tree_Cleaned_Event;
vector<Signal> *Tree_Cleaned_Silicon;
vector<Signal> *Tree_Cleaned_SiPMHigh;
vector<Signal> *Tree_Cleaned_SiPMLow;
double Tree_Channel;

//////////////GROUPED////////////////
/// Silicon
TH1D *HStrip_Channel[SIGNAL_MAX];
TH1D *HRear_Channel[SIGNAL_MAX];
TH1D *HStripRear_Time[SIGNAL_MAX];
TH2D *HStripRear_Channel[SIGNAL_MAX];
TH1D *HFracRearStripChannel[SIGNAL_MAX];
TH2D *HSiPMRearHigh_TimeChannel[SIGNAL_MAX];
TH1D *HStrips_Multiplicity;
TH1D *HRear_Multiplicity;
TH2D *HRearStrip_Multiplicity;
TH2D *HStripsRearSameDetMultiplicity;
TH1D *HStripsAssociatedMultiplicity;
TH1D *HRearAssociatedMultiplicity;
TH2D *HRearStripAssociatedMultiplicity;
TH2D *HRear_Detector_Multiplicity;
TH1D *HStripAssociated;
TH1D *HStripAll;
TH1D *HRearStripCases;
TH2D *HRearStrip;
TH2D *HRearStripAssociated;


/// SiPM High
TH1D *HSiPMHigh_Channel[SIGNAL_MAX];
TH1D *HSiPMHighRear_Time[SIGNAL_MAX];
TH2D *HSiPMHighRear_TimeChannel[SIGNAL_MAX];

/// SiPM Low
TH1D *HSiPMLow_Channel[SIGNAL_MAX];
TH1D *HSiPMLowRear_Time[SIGNAL_MAX];
TH2D *HSiPMLowRear_TimeChannel[SIGNAL_MAX];

/// SIPMs
TH1D *HSiPMHigh_False;
TH1D *HSiPMLow_False;
TH1D *HSiPMHigh_Time_False;
TH1D *HSiPMLow_Time_False;
TH1D *HSiPMHigh_SiPM_False;
TH1D *HSiPMLow_SiPM_False;

double counter_true = 0;
double counter_high = 0;
double counter_low = 0;
TH1D *HSiPM_Counter_False;

TH1D *HSiPMHigh_Multiplicity;
TH1D *HSiPMLow_Multiplicity;
TH2D *HSiPM_Multiplicities;
/////////////////////////////////////
//////////////CLEANED////////////////
/// Silicon
TH1D *HStrip_Channel_C[SIGNAL_MAX];
TH1D *HRear_Channel_C[SIGNAL_MAX];
TH1D *HStripRear_Time_C[SIGNAL_MAX];
TH2D *HStripRear_Channel_C[SIGNAL_MAX];
TH1D *HFracRearStripChannel_C[SIGNAL_MAX];

TH2D *HStripsMultiplicity_C[SIGNAL_MAX];

/// SiPM High
TH1D *HSiPMHigh_Channel_C[SIGNAL_MAX];
TH1D *HSiPMHighRear_Time_C[SIGNAL_MAX];
TH2D *HSiPMHighRear_TimeChannel_C[SIGNAL_MAX];

/// SiPM Low
TH1D *HSiPMLow_Channel_C[SIGNAL_MAX];
TH1D *HSiPMLowRear_Time_C[SIGNAL_MAX];
TH2D *HSiPMLowRear_TimeChannel_C[SIGNAL_MAX];

/// SIPMs
TH1D *HSiPMHigh_Multiplicity_C;
TH1D *HSiPMLow_Multiplicity_C;
TH2D *HSiPM_Multiplicities_C;
TGraph *GSiPM_Channel_C[BETA_SIZE + 1];
TProfile *PSiPM_Channel_C[BETA_SIZE + 1];

TTree *Tree_Silicons[SIGNAL_MAX];

//////////////////////////////////////

inline int InitHistograms_Grouped()
{
  for (size_t i = 0; i < SIGNAL_MAX; ++i)
  {
    HStrip_Channel[i] = NULL;
    HStripRear_Time[i] = NULL;
    HStripRear_Channel[i] = NULL;
    HFracRearStripChannel[i] = NULL;
    HStrips_Multiplicity = NULL;
    HSiPMRearHigh_TimeChannel[i] = NULL;
    HSiPMHigh_Channel[i] = NULL;
    HSiPMHigh_Multiplicity = NULL;
    HSiPMHighRear_Time[i] = NULL;
    HSiPMHighRear_TimeChannel[i] = NULL;
    HSiPMLow_Channel[i] = NULL;
    HSiPMLow_Multiplicity = NULL;
    HSiPMLowRear_Time[i] = NULL;
    HSiPMLowRear_TimeChannel[i] = NULL;
    HSiPM_Multiplicities = NULL;

    HSiPMHigh_False = NULL;
    HSiPMLow_False = NULL;
    HSiPMHigh_Time_False = NULL;
    HSiPMLow_Time_False = NULL;
    HSiPMHigh_SiPM_False = NULL;
    HSiPMLow_SiPM_False = NULL;

    HSiPM_Counter_False = NULL;
  }

  for (size_t i = 0; i < detectorNum; ++i)
  {
    if (IsDetectorSiliStrip(i))
    {
      HStrip_Channel[i] = new TH1D(("HStrip_Channel_" + detectorName[i]).c_str(), ("HStrip_Channel_" + detectorName[i]).c_str(), eSiliN, eSiliMin, eSiliMax);
      HStrip_Channel[i]->GetXaxis()->SetTitle("Strips [Channel]");
      HStrip_Channel[i]->GetYaxis()->SetTitle("Counts");
      HStrip_Channel[i]->GetXaxis()->CenterTitle();
      HStrip_Channel[i]->GetYaxis()->CenterTitle();

      // HStripRear_Time[i] = new TH1D(("HStripRear_Time_" + detectorName[i]).c_str(), ("HStripRear_Time_" + detectorName[i]).c_str(), winSiliN, winSiliMin, winSiliMax);
      // HStripRear_Time[i]->GetXaxis()->SetTitle("Time [ns]");
      // HStripRear_Time[i]->GetYaxis()->SetTitle("Counts");
      // HStripRear_Time[i]->GetXaxis()->CenterTitle();
      // HStripRear_Time[i]->GetYaxis()->CenterTitle();

      // HStripRear_Channel[i] = new TH2D(("HStripRear_Channel_" + detectorName[i]).c_str(), ("HStripRear_Channel_" + detectorName[i]).c_str(), eSiliN / 10, eSiliMin, eSiliMax, eSiliN / 10, eSiliMin, eSiliMax);
      // HStripRear_Channel[i]->GetXaxis()->SetTitle("Rear [Channel]");
      // HStripRear_Channel[i]->GetYaxis()->SetTitle("Strip [Channel]");
      // HStripRear_Channel[i]->GetXaxis()->CenterTitle();
      // HStripRear_Channel[i]->GetYaxis()->CenterTitle();
      // HStripRear_Channel[i]->SetDrawOption("COLZ");

      // HFracRearStripChannel[i] = new TH1D(("HFracRearStripChannel_" + detectorName[i]).c_str(), ("HFracRearStripChannel_" + detectorName[i]).c_str(), 2000, 0, 2);
      // HFracRearStripChannel[i]->GetXaxis()->SetTitle("Rear/Strip");
      // HFracRearStripChannel[i]->GetYaxis()->SetTitle("Counts");
      // HFracRearStripChannel[i]->GetXaxis()->CenterTitle();
      // HFracRearStripChannel[i]->GetYaxis()->CenterTitle();

      // HSiPMRearHigh_TimeChannel[i] = new TH2D(("HSiPMRearHigh_TimeChannel_" + detectorName[i]).c_str(), ("HSiPMRearHigh_TimeChannel_" + detectorName[i]).c_str(), winHighN, -winHighMax, -winHighMin, eSiliN / 100, eSiliMin, eSiliMax);
      // HSiPMRearHigh_TimeChannel[i]->GetXaxis()->SetTitle("Time [ns]");
      // HSiPMRearHigh_TimeChannel[i]->GetYaxis()->SetTitle("Strip [Channel]");
      // HSiPMRearHigh_TimeChannel[i]->GetXaxis()->CenterTitle();
      // HSiPMRearHigh_TimeChannel[i]->GetYaxis()->CenterTitle();
      // HSiPMRearHigh_TimeChannel[i]->SetDrawOption("COLZ");
    }

    if (IsDetectorSiliBack(i))
    {

      HRear_Channel[i] = new TH1D(("HRear_Channel_" + detectorName[i]).c_str(), ("HRear_Channel_" + detectorName[i]).c_str(), eSiliN, eSiliMin, eSiliMax);
      HRear_Channel[i]->GetXaxis()->SetTitle("Rear [Channel]");
      HRear_Channel[i]->GetYaxis()->SetTitle("Counts");
      HRear_Channel[i]->GetXaxis()->CenterTitle();
      HRear_Channel[i]->GetYaxis()->CenterTitle();
    }

    if (IsDetectorBetaHigh(i))
    {
      HSiPMHigh_Channel[i] = new TH1D(("HSiPMHigh_Channel_" + detectorName[i]).c_str(), ("HSiPMHigh_Channel_" + detectorName[i]).c_str(), eHighN, eHighMin, eHighMax);
      HSiPMHigh_Channel[i]->GetXaxis()->SetTitle("SiPM High [Channel]");
      HSiPMHigh_Channel[i]->GetYaxis()->SetTitle("Counts");
      HSiPMHigh_Channel[i]->GetXaxis()->CenterTitle();
      HSiPMHigh_Channel[i]->GetYaxis()->CenterTitle();

      // HSiPMHighRear_Time[i] = new TH1D(("HSiPMHighRear_Time_" + detectorName[i]).c_str(), ("HSiPMHighRear_Time_" + detectorName[i]).c_str(), winHighN, winHighMin, winHighMax);
      // HSiPMHighRear_Time[i]->GetXaxis()->SetTitle("Time [ns]");
      // HSiPMHighRear_Time[i]->GetYaxis()->SetTitle("Counts");
      // HSiPMHighRear_Time[i]->GetXaxis()->CenterTitle();
      // HSiPMHighRear_Time[i]->GetYaxis()->CenterTitle();

      // HSiPMHighRear_TimeChannel[i] = new TH2D(("HSiPMHighRear_TimeChannel_" + detectorName[i]).c_str(), ("HSiPMHighRear_TimeChannel_" + detectorName[i]).c_str(), winHighN, winHighMin, winHighMax, eHighN, eHighMin, eHighMax);
      // HSiPMHighRear_TimeChannel[i]->GetXaxis()->SetTitle("Time [ns]");
      // HSiPMHighRear_TimeChannel[i]->GetYaxis()->SetTitle("SiPM High [Channel]");
      // HSiPMHighRear_TimeChannel[i]->GetXaxis()->CenterTitle();
      // HSiPMHighRear_TimeChannel[i]->GetYaxis()->CenterTitle();
      // HSiPMHighRear_TimeChannel[i]->SetDrawOption("COLZ");
    }

    if (IsDetectorBetaLow(i))
    {
      HSiPMLow_Channel[i] = new TH1D(("HSiPMLow_Channel_" + detectorName[i]).c_str(), ("HSiPMLow_Channel_" + detectorName[i]).c_str(), eLowN, eLowMin, eLowMax);
      HSiPMLow_Channel[i]->GetXaxis()->SetTitle("SiPM Low [Channel]");
      HSiPMLow_Channel[i]->GetYaxis()->SetTitle("Counts");
      HSiPMLow_Channel[i]->GetXaxis()->CenterTitle();
      HSiPMLow_Channel[i]->GetYaxis()->CenterTitle();

      // HSiPMLowRear_Time[i] = new TH1D(("HSiPMLowRear_Time_" + detectorName[i]).c_str(), ("HSiPMLowRear_Time_" + detectorName[i]).c_str(), winLowN, winLowMin, winLowMax);
      // HSiPMLowRear_Time[i]->GetXaxis()->SetTitle("Time [ns]");
      // HSiPMLowRear_Time[i]->GetYaxis()->SetTitle("Counts");
      // HSiPMLowRear_Time[i]->GetXaxis()->CenterTitle();
      // HSiPMLowRear_Time[i]->GetYaxis()->CenterTitle();

      // HSiPMLowRear_TimeChannel[i] = new TH2D(("HSiPMLowRear_TimeChannel_" + detectorName[i]).c_str(), ("HSiPMLowRear_TimeChannel_" + detectorName[i]).c_str(), winLowN, winLowMin, winLowMax, eLowN, eLowMin, eLowMax);
      // HSiPMLowRear_TimeChannel[i]->GetXaxis()->SetTitle("Time [ns]");
      // HSiPMLowRear_TimeChannel[i]->GetYaxis()->SetTitle("SiPM Low [Channel]");
      // HSiPMLowRear_TimeChannel[i]->GetXaxis()->CenterTitle();
      // HSiPMLowRear_TimeChannel[i]->GetYaxis()->CenterTitle();
      // HSiPMLowRear_TimeChannel[i]->SetDrawOption("COLZ");
    }
  }

  HStrips_Multiplicity = new TH1D(("HStrips_Multiplicity"), ("HStrips_Multiplicity"), 10, 0, 10);
  HStrips_Multiplicity->GetXaxis()->SetTitle("Multiplicity");
  HStrips_Multiplicity->GetYaxis()->SetTitle("Counts");
  HStrips_Multiplicity->GetXaxis()->CenterTitle();
  HStrips_Multiplicity->GetYaxis()->CenterTitle();

  HRear_Multiplicity = new TH1D(("HRear_Multiplicity"), ("HRear_Multiplicity"), 10, 0, 10);
  HRear_Multiplicity->GetXaxis()->SetTitle("Multiplicity");
  HRear_Multiplicity->GetYaxis()->SetTitle("Counts");
  HRear_Multiplicity->GetXaxis()->CenterTitle();
  HRear_Multiplicity->GetYaxis()->CenterTitle();

  HRearStrip_Multiplicity = new TH2D(("HRearStrip_Multiplicity"), ("HRearStrip_Multiplicity"), 10, 0, 10, 10, 0, 10);
  HRearStrip_Multiplicity->GetXaxis()->SetTitle("Multiplicity Rear");
  HRearStrip_Multiplicity->GetYaxis()->SetTitle("Multiplicity Strip");
  HRearStrip_Multiplicity->GetXaxis()->CenterTitle();
  HRearStrip_Multiplicity->GetYaxis()->CenterTitle();
  HRearStrip_Multiplicity->SetDrawOption("COLZ");

  HStripsAssociatedMultiplicity = new TH1D(("HStripsAssociatedMultiplicity"), ("HStripsAssociatedMultiplicity"), 10, 0, 10);
  HStripsAssociatedMultiplicity->GetXaxis()->SetTitle("Multiplicity");
  HStripsAssociatedMultiplicity->GetYaxis()->SetTitle("Counts");
  HStripsAssociatedMultiplicity->GetXaxis()->CenterTitle();
  HStripsAssociatedMultiplicity->GetYaxis()->CenterTitle();
  HStripsAssociatedMultiplicity->SetLineColor(kRed);

  HRearAssociatedMultiplicity = new TH1D(("HRearAssociatedMultiplicity"), ("HRearAssociatedMultiplicity"), 10, 0, 10);
  HRearAssociatedMultiplicity->GetXaxis()->SetTitle("Multiplicity");
  HRearAssociatedMultiplicity->GetYaxis()->SetTitle("Counts");
  HRearAssociatedMultiplicity->GetXaxis()->CenterTitle();
  HRearAssociatedMultiplicity->GetYaxis()->CenterTitle();
  HRearAssociatedMultiplicity->SetLineColor(kRed);

  HRearStripAssociatedMultiplicity = new TH2D(("HRearStripAssociatedMultiplicity"), ("HRearStripAssociatedMultiplicity"), 10, 0, 10, 10, 0, 10);
  HRearStripAssociatedMultiplicity->GetXaxis()->SetTitle("Multiplicity Rear");
  HRearStripAssociatedMultiplicity->GetYaxis()->SetTitle("Multiplicity Strip");
  HRearStripAssociatedMultiplicity->GetXaxis()->CenterTitle();
  HRearStripAssociatedMultiplicity->GetYaxis()->CenterTitle();
  HRearStripAssociatedMultiplicity->SetDrawOption("COLZ");

  HRear_Detector_Multiplicity = new TH2D(("HRear_Detector_Multiplicity"), ("HRear_Detector_Multiplicity"), 10, 0, 10, 10, 0, 10);
  HRear_Detector_Multiplicity->GetXaxis()->SetTitle("Multiplicity Rear");
  HRear_Detector_Multiplicity->GetYaxis()->SetTitle("Multiplicity Detector");
  HRear_Detector_Multiplicity->GetXaxis()->CenterTitle();
  HRear_Detector_Multiplicity->GetYaxis()->CenterTitle();
  HRear_Detector_Multiplicity->SetDrawOption("COLZ");

  HStripAssociated = new TH1D(("HStripAssociated"), ("HStripAssociated"), 10, 0, 10);
  HStripAssociated->GetXaxis()->SetTitle("Multiplicity");
  HStripAssociated->GetYaxis()->SetTitle("Counts");
  HStripAssociated->GetXaxis()->CenterTitle();
  HStripAssociated->GetYaxis()->CenterTitle();
  HStripAssociated->SetLineColor(kRed);

  HStripAll = new TH1D(("HStripAll"), ("HStripAll"), 10, 0, 10);
  HStripAll->GetXaxis()->SetTitle("Multiplicity");
  HStripAll->GetYaxis()->SetTitle("Counts");
  HStripAll->GetXaxis()->CenterTitle();
  HStripAll->GetYaxis()->CenterTitle();

  HRearStripCases = new TH1D(("HRearStripCases"), ("HRearStripCases"), 10, 0, 10);
  HRearStripCases->GetXaxis()->SetTitle("CASE");
  HRearStripCases->GetYaxis()->SetTitle("Counts");
  HRearStripCases->GetXaxis()->CenterTitle();
  HRearStripCases->GetYaxis()->CenterTitle();
  HRearStripCases->SetLineColor(kRed);

  HSiPMHigh_Multiplicity = new TH1D(("HSiPMHigh_Multiplicity"), ("HSiPMHigh_Multiplicity"), 15, 0, 15);
  HSiPMHigh_Multiplicity->GetXaxis()->SetTitle("Multiplicity");
  HSiPMHigh_Multiplicity->GetYaxis()->SetTitle("Counts");
  HSiPMHigh_Multiplicity->GetXaxis()->CenterTitle();
  HSiPMHigh_Multiplicity->GetYaxis()->CenterTitle();

  HSiPMLow_Multiplicity = new TH1D(("HSiPMLow_Multiplicity"), ("HSiPMLow_Multiplicity"), 15, 0, 15);
  HSiPMLow_Multiplicity->GetXaxis()->SetTitle("Multiplicity");
  HSiPMLow_Multiplicity->GetYaxis()->SetTitle("Counts");
  HSiPMLow_Multiplicity->GetXaxis()->CenterTitle();
  HSiPMLow_Multiplicity->GetYaxis()->CenterTitle();

  HRearStrip = new TH2D(("HRearStrip"), ("HRearStrip"), 80, 10, 90, 80, 10, 90);
  HRearStrip->GetXaxis()->SetTitle("Rear");
  HRearStrip->GetYaxis()->SetTitle("Strip");
  HRearStrip->GetXaxis()->CenterTitle();
  HRearStrip->GetYaxis()->CenterTitle();
  HRearStrip->SetDrawOption("COLZ");

  HRearStripAssociated = new TH2D(("HRearStripAssociated"), ("HRearStripAssociated"), 80, 10, 90, 80, 10, 90);
  HRearStripAssociated->GetXaxis()->SetTitle("Strip");
  HRearStripAssociated->GetYaxis()->SetTitle("Rear");
  HRearStripAssociated->GetXaxis()->CenterTitle();
  HRearStripAssociated->GetYaxis()->CenterTitle();
  HRearStripAssociated->SetDrawOption("COLZ");





  // HSiPM_Multiplicities = new TH2D(("HSiPM_Multiplicities"), ("HSiPM_Multiplicities"), 10, 0, 10, 10, 0, 10);
  // HSiPM_Multiplicities->GetXaxis()->SetTitle("Multiplicity High");
  // HSiPM_Multiplicities->GetYaxis()->SetTitle("Multiplicity Low");
  // HSiPM_Multiplicities->GetXaxis()->CenterTitle();
  // HSiPM_Multiplicities->GetYaxis()->CenterTitle();
  // HSiPM_Multiplicities->SetDrawOption("COLZ");

  // HSiPMLow_False = new TH1D(("HSiPMLow_False"), ("HSiPMLow_False"), eLowN, eLowMin, eLowMax);
  // HSiPMLow_False->GetXaxis()->SetTitle("SiPM Low [Channel]");
  // HSiPMLow_False->GetYaxis()->SetTitle("Counts");
  // HSiPMLow_False->GetXaxis()->CenterTitle();
  // HSiPMLow_False->GetYaxis()->CenterTitle();

  // HSiPMHigh_False = new TH1D(("HSiPMHigh_False"), ("HSiPMHigh_False"), eHighN, eHighMin, eHighMax);
  // HSiPMHigh_False->GetXaxis()->SetTitle("SiPM High [Channel]");
  // HSiPMHigh_False->GetYaxis()->SetTitle("Counts");
  // HSiPMHigh_False->GetXaxis()->CenterTitle();
  // HSiPMHigh_False->GetYaxis()->CenterTitle();

  // HSiPMLow_Time_False = new TH1D(("HSiPMLow_Time_False"), ("HSiPMLow_Time_False"), winLowN, winLowMin, winLowMax);
  // HSiPMLow_Time_False->GetXaxis()->SetTitle("Time [ns]");
  // HSiPMLow_Time_False->GetYaxis()->SetTitle("Counts");
  // HSiPMLow_Time_False->GetXaxis()->CenterTitle();
  // HSiPMLow_Time_False->GetYaxis()->CenterTitle();

  // HSiPMHigh_Time_False = new TH1D(("HSiPMHigh_Time_False"), ("HSiPMHigh_Time_False"), winHighN, winHighMin, winHighMax);
  // HSiPMHigh_Time_False->GetXaxis()->SetTitle("Time [ns]");
  // HSiPMHigh_Time_False->GetYaxis()->SetTitle("Counts");
  // HSiPMHigh_Time_False->GetXaxis()->CenterTitle();
  // HSiPMHigh_Time_False->GetYaxis()->CenterTitle();

  // HSiPMLow_SiPM_False = new TH1D(("HSiPMLow_SiPM_False"), ("HSiPMLow_SiPM_False"), 10, 0, 10);
  // HSiPMLow_SiPM_False->GetXaxis()->SetTitle("SiPM");
  // HSiPMLow_SiPM_False->GetYaxis()->SetTitle("Counts");
  // HSiPMLow_SiPM_False->GetXaxis()->CenterTitle();
  // HSiPMLow_SiPM_False->GetYaxis()->CenterTitle();

  // HSiPMHigh_SiPM_False = new TH1D(("HSiPMHigh_SiPM_False"), ("HSiPMHigh_SiPM_False"), 10, 0, 10);
  // HSiPMHigh_SiPM_False->GetXaxis()->SetTitle("SiPM");
  // HSiPMHigh_SiPM_False->GetYaxis()->SetTitle("Counts");
  // HSiPMHigh_SiPM_False->GetXaxis()->CenterTitle();
  // HSiPMHigh_SiPM_False->GetYaxis()->CenterTitle();

  // HSiPM_Counter_False = new TH1D(("HSiPM_Counter_False"), ("HSiPM_Counter_False"), 5, -2, 2);
  // HSiPM_Counter_False->GetXaxis()->SetTitle("False Low \t True \t False High");
  // HSiPM_Counter_False->GetYaxis()->SetTitle("Counts");
  // HSiPM_Counter_False->GetXaxis()->CenterTitle();
  // HSiPM_Counter_False->GetYaxis()->CenterTitle();

  return 0;
}

inline int InitHistograms_Cleaned()
{
  for (size_t i = 0; i < SIGNAL_MAX; ++i)
  {
    HStrip_Channel_C[i] = NULL;
    HRear_Channel_C[i] = NULL;
    HStripRear_Time_C[i] = NULL;
    HStripRear_Channel_C[i] = NULL;
    HFracRearStripChannel_C[i] = NULL;
    HStripsMultiplicity_C[i] = NULL;
    HSiPMHigh_Channel_C[i] = NULL;
    HSiPMHigh_Multiplicity_C = NULL;
    HSiPMHighRear_Time_C[i] = NULL;
    HSiPMHighRear_TimeChannel_C[i] = NULL;
    HSiPMLow_Channel_C[i] = NULL;
    HSiPMLow_Multiplicity_C = NULL;
    HSiPMLowRear_Time_C[i] = NULL;
    HSiPMLowRear_TimeChannel_C[i] = NULL;
    HSiPM_Multiplicities_C = NULL;

    GSiPM_Channel_C[i] = NULL;
    PSiPM_Channel_C[i] = NULL;
  }

  for (size_t i = 0; i < detectorNum; ++i)
  {
    if (IsDetectorSiliStrip(i))
    {
      HStrip_Channel_C[i] = new TH1D(("HStrip_Channel_C_" + detectorName[i]).c_str(), ("HStrip_Channel_C_" + detectorName[i]).c_str(), eSiliN, eSiliMin, eSiliMax);
      HStrip_Channel_C[i]->GetXaxis()->SetTitle("Strips [Channel]");
      HStrip_Channel_C[i]->GetYaxis()->SetTitle("Counts");
      HStrip_Channel_C[i]->GetXaxis()->CenterTitle();
      HStrip_Channel_C[i]->GetYaxis()->CenterTitle();

      HStripRear_Time_C[i] = new TH1D(("HStripRear_Time_C_" + detectorName[i]).c_str(), ("HStripRear_Time_C_" + detectorName[i]).c_str(), winSiliN, winSiliMin, winSiliMax);
      HStripRear_Time_C[i]->GetXaxis()->SetTitle("Time [ns]");
      HStripRear_Time_C[i]->GetYaxis()->SetTitle("Counts");
      HStripRear_Time_C[i]->GetXaxis()->CenterTitle();
      HStripRear_Time_C[i]->GetYaxis()->CenterTitle();

      HStripRear_Channel_C[i] = new TH2D(("HStripRear_Channel_C_" + detectorName[i]).c_str(), ("HStripRear_Channel_C_" + detectorName[i]).c_str(), eSiliN / 10, eSiliMin, eSiliMax, eSiliN / 10, eSiliMin, eSiliMax);
      HStripRear_Channel_C[i]->GetXaxis()->SetTitle("Rear [Channel]");
      HStripRear_Channel_C[i]->GetYaxis()->SetTitle("Strip [Channel]");
      HStripRear_Channel_C[i]->GetXaxis()->CenterTitle();
      HStripRear_Channel_C[i]->GetYaxis()->CenterTitle();
      HStripRear_Channel_C[i]->SetDrawOption("COLZ");

      HFracRearStripChannel_C[i] = new TH1D(("HFracRearStripChannel_C_" + detectorName[i]).c_str(), ("HFracRearStripChannel_C_" + detectorName[i]).c_str(), 2000, 0, 2);
      HFracRearStripChannel_C[i]->GetXaxis()->SetTitle("Rear/Strip");
      HFracRearStripChannel_C[i]->GetYaxis()->SetTitle("Counts");
      HFracRearStripChannel_C[i]->GetXaxis()->CenterTitle();
      HFracRearStripChannel_C[i]->GetYaxis()->CenterTitle();
    }

    if (IsDetectorSiliBack(i))
    {
      HStripsMultiplicity_C[i] = new TH2D(("HStripsMultiplicity_C_" + detectorName[i]).c_str(), ("HStripsMultiplicity_C_" + detectorName[i]).c_str(), 6, 0, 6, 6, 0, 6);
      HStripsMultiplicity_C[i]->GetXaxis()->SetTitle("Strip A");
      HStripsMultiplicity_C[i]->GetYaxis()->SetTitle("Strip B");
      HStripsMultiplicity_C[i]->GetXaxis()->CenterTitle();
      HStripsMultiplicity_C[i]->GetYaxis()->CenterTitle();
      HStripsMultiplicity_C[i]->SetDrawOption("COLZ");

      HRear_Channel_C[i] = new TH1D(("HRear_Channel_C_" + detectorName[i]).c_str(), ("HRear_Channel_C_" + detectorName[i]).c_str(), eSiliN, eSiliMin, eSiliMax);
      HRear_Channel_C[i]->GetXaxis()->SetTitle("Rear [Channel]");
      HRear_Channel_C[i]->GetYaxis()->SetTitle("Counts");
      HRear_Channel_C[i]->GetXaxis()->CenterTitle();
      HRear_Channel_C[i]->GetYaxis()->CenterTitle();
    }

    if (IsDetectorBetaHigh(i))
    {
      HSiPMHigh_Channel_C[i] = new TH1D(("HSiPMHigh_Channel_C_" + detectorName[i]).c_str(), ("HSiPMHigh_Channel_C_" + detectorName[i]).c_str(), eHighN, eHighMin, eHighMax);
      HSiPMHigh_Channel_C[i]->GetXaxis()->SetTitle("SiPM High [Channel]");
      HSiPMHigh_Channel_C[i]->GetYaxis()->SetTitle("Counts");
      HSiPMHigh_Channel_C[i]->GetXaxis()->CenterTitle();
      HSiPMHigh_Channel_C[i]->GetYaxis()->CenterTitle();

      HSiPMHighRear_Time_C[i] = new TH1D(("HSiPMHighRear_Time_C_" + detectorName[i]).c_str(), ("HSiPMHighRear_Time_C_" + detectorName[i]).c_str(), winHighN, winHighMin, winHighMax);
      HSiPMHighRear_Time_C[i]->GetXaxis()->SetTitle("Time [ns]");
      HSiPMHighRear_Time_C[i]->GetYaxis()->SetTitle("Counts");
      HSiPMHighRear_Time_C[i]->GetXaxis()->CenterTitle();
      HSiPMHighRear_Time_C[i]->GetYaxis()->CenterTitle();

      HSiPMHighRear_TimeChannel_C[i] = new TH2D(("HSiPMHighRear_TimeChannel_C_" + detectorName[i]).c_str(), ("HSiPMHighRear_TimeChannel_C_" + detectorName[i]).c_str(), winHighN, winHighMin, winHighMax, eHighN, eHighMin, eHighMax);
      HSiPMHighRear_TimeChannel_C[i]->GetXaxis()->SetTitle("Time [ns]");
      HSiPMHighRear_TimeChannel_C[i]->GetYaxis()->SetTitle("SiPM High [Channel]");
      HSiPMHighRear_TimeChannel_C[i]->GetXaxis()->CenterTitle();
      HSiPMHighRear_TimeChannel_C[i]->GetYaxis()->CenterTitle();
      HSiPMHighRear_TimeChannel_C[i]->SetDrawOption("COLZ");
    }

    if (IsDetectorBetaLow(i))
    {
      HSiPMLow_Channel_C[i] = new TH1D(("HSiPMLow_Channel_C_" + detectorName[i]).c_str(), ("HSiPMLow_Channel_C_" + detectorName[i]).c_str(), eLowN, eLowMin, eLowMax);
      HSiPMLow_Channel_C[i]->GetXaxis()->SetTitle("SiPM Low [Channel]");
      HSiPMLow_Channel_C[i]->GetYaxis()->SetTitle("Counts");
      HSiPMLow_Channel_C[i]->GetXaxis()->CenterTitle();
      HSiPMLow_Channel_C[i]->GetYaxis()->CenterTitle();

      HSiPMLowRear_Time_C[i] = new TH1D(("HSiPMLowRear_Time_C_" + detectorName[i]).c_str(), ("HSiPMLowRear_Time_C_" + detectorName[i]).c_str(), winLowN, winLowMin, winLowMax);
      HSiPMLowRear_Time_C[i]->GetXaxis()->SetTitle("Time [ns]");
      HSiPMLowRear_Time_C[i]->GetYaxis()->SetTitle("Counts");
      HSiPMLowRear_Time_C[i]->GetXaxis()->CenterTitle();
      HSiPMLowRear_Time_C[i]->GetYaxis()->CenterTitle();

      HSiPMLowRear_TimeChannel_C[i] = new TH2D(("HSiPMLowRear_TimeChannel_C_" + detectorName[i]).c_str(), ("HSiPMLowRear_TimeChannel_C_" + detectorName[i]).c_str(), winLowN, winLowMin, winLowMax, eLowN, eLowMin, eLowMax);
      HSiPMLowRear_TimeChannel_C[i]->GetXaxis()->SetTitle("Time [ns]");
      HSiPMLowRear_TimeChannel_C[i]->GetYaxis()->SetTitle("SiPM Low [Channel]");
      HSiPMLowRear_TimeChannel_C[i]->GetXaxis()->CenterTitle();
      HSiPMLowRear_TimeChannel_C[i]->GetYaxis()->CenterTitle();
      HSiPMLowRear_TimeChannel_C[i]->SetDrawOption("COLZ");
    }
  }

  for (int i = 1; i <= BETA_SIZE; ++i)
  {
    GSiPM_Channel_C[i] = new TGraph();

    PSiPM_Channel_C[i] = new TProfile(("PSiPM_" + to_string(i)).c_str(), ("PSiPM_" + to_string(i)).c_str(), 500, 0, eLowMax/2, 0, eHighMax);
    PSiPM_Channel_C[i]->GetXaxis()->SetTitle("SiPM Low [Channel]");
    PSiPM_Channel_C[i]->GetYaxis()->SetTitle("SiPM High [Channel]");
    PSiPM_Channel_C[i]->GetXaxis()->CenterTitle();
    PSiPM_Channel_C[i]->GetYaxis()->CenterTitle(); 
  }

  HSiPMHigh_Multiplicity_C = new TH1D(("HSiPMHigh_Multiplicity_C"), ("HSiPMHigh_Multiplicity_C"), 10, 0, 10);
  HSiPMHigh_Multiplicity_C->GetXaxis()->SetTitle("Multiplicity");
  HSiPMHigh_Multiplicity_C->GetYaxis()->SetTitle("Counts");
  HSiPMHigh_Multiplicity_C->GetXaxis()->CenterTitle();
  HSiPMHigh_Multiplicity_C->GetYaxis()->CenterTitle();

  HSiPMLow_Multiplicity_C = new TH1D(("HSiPMLow_Multiplicity_C"), ("HSiPMLow_Multiplicity_C"), 10, 0, 10);
  HSiPMLow_Multiplicity_C->GetXaxis()->SetTitle("Multiplicity");
  HSiPMLow_Multiplicity_C->GetYaxis()->SetTitle("Counts");
  HSiPMLow_Multiplicity_C->GetXaxis()->CenterTitle();
  HSiPMLow_Multiplicity_C->GetYaxis()->CenterTitle();

  HSiPM_Multiplicities_C = new TH2D(("HSiPM_Multiplicities_C"), ("HSiPM_Multiplicities_C"), 10, 0, 10, 10, 0, 10);
  HSiPM_Multiplicities_C->GetXaxis()->SetTitle("Multiplicity High");
  HSiPM_Multiplicities_C->GetYaxis()->SetTitle("Multiplicity Low");
  HSiPM_Multiplicities_C->GetXaxis()->CenterTitle();
  HSiPM_Multiplicities_C->GetYaxis()->CenterTitle();
  HSiPM_Multiplicities_C->SetDrawOption("COLZ");
  return 0;
}

inline int InitTree_Grouped()
{
  Tree_Grouped = new TTree("Tree", "Tree");
  Tree_Grouped->Branch("Tree_Event", &Tree_Event, "Tree_Event/I");
  Tree_Grouped->Branch("Tree_Silicon", &Tree_Silicon);
  Tree_Grouped->Branch("Tree_SiPMHigh", &Tree_SiPMHigh);
  Tree_Grouped->Branch("Tree_SiPMLow", &Tree_SiPMLow);
  return 0;
}

inline int InitTree_Cleaned()
{
  Tree_Cleaned = new TTree("Tree", "Tree");
  Tree_Cleaned->Branch("Tree_Event", &Tree_Cleaned_Event, "Tree_Cleaned_Event/I");
  Tree_Cleaned->Branch("Tree_Silicon", &Tree_Cleaned_Silicon);
  Tree_Cleaned->Branch("Tree_SiPMHigh", &Tree_Cleaned_SiPMHigh);
  Tree_Cleaned->Branch("Tree_SiPMLow", &Tree_Cleaned_SiPMLow);

  for (size_t i = 0; i < SIGNAL_MAX; ++i)
  {
    if (IsDetectorSili(i))
    {
      Tree_Silicons[i] = new TTree(("Tree_Silicon_" + detectorName[i]).c_str(), ("Tree_Silicon_" + detectorName[i]).c_str());
      Tree_Silicons[i]->Branch("Channel", &Tree_Channel, "Channel/D");
    }
  }

  return 0;
}

inline int WriteHistograms_Grouped()
{
  GROUPED_File->cd();
  TDirectory *Strip_Channel = GROUPED_File->mkdir("Strip_Channel");
  TDirectory *Strip_Time = GROUPED_File->mkdir("Strip_Time");
  TDirectory *Strip_Channel_Time = GROUPED_File->mkdir("Strip_Channel_Time");
  TDirectory *Rear_Strip_Channel = GROUPED_File->mkdir("Rear_Strip_Channel");
  TDirectory *fracRear_Strip_Channel = GROUPED_File->mkdir("Frac_Rear_Strip_Channel");
  TDirectory *Strip_Multiplicities = GROUPED_File->mkdir("Strip_Multiplicities");

  TDirectory *SiPMHigh_Channel = GROUPED_File->mkdir("SiPMHigh_Channel");
  TDirectory *SiPMHigh_Time = GROUPED_File->mkdir("SiPMHigh_Time");
  TDirectory *SiPMHighRear_TimeChannel = GROUPED_File->mkdir("SiPMHighRear_TimeChannel");
  TDirectory *SiPMHigh_Multiplicity = GROUPED_File->mkdir("SiPMHigh_Multiplicity");

  TDirectory *SiPMLow_Channel = GROUPED_File->mkdir("SiPMLow_Channel");
  TDirectory *SiPMLow_Time = GROUPED_File->mkdir("SiPMLow_Time");
  TDirectory *SiPMLowRear_TimeChannel = GROUPED_File->mkdir("SiPMLowRear_TimeChannel");
  TDirectory *SiPMLow_Multiplicity = GROUPED_File->mkdir("SiPMLow_Multiplicity");

  TDirectory *SiPM_Multiplicities = GROUPED_File->mkdir("SiPM_Multiplicities");

  for (size_t i = 0; i < detectorNum; ++i)
  {
    if (IsDetectorSiliStrip(i))
    {
      Strip_Channel->cd();
      HStrip_Channel[i]->Write();
      delete HStrip_Channel[i];
      // Strip_Time->cd();
      // HStripRear_Time[i]->Write();
      // delete HStripRear_Time[i];
      // Rear_Strip_Channel->cd();
      // HStripRear_Channel[i]->Write();
      // delete HStripRear_Channel[i];
      // fracRear_Strip_Channel->cd();
      // HFracRearStripChannel[i]->Write();
      // delete HFracRearStripChannel[i];
      // Strip_Channel_Time->cd();
      // HSiPMRearHigh_TimeChannel[i]->Write();
    }

    if (IsDetectorSiliBack(i))
    {
      HRear_Channel[i]->Write();
      delete HRear_Channel[i];
    }

    if (IsDetectorBetaHigh(i))
    {
      SiPMHigh_Channel->cd();
      HSiPMHigh_Channel[i]->Write();
      delete HSiPMHigh_Channel[i];
      // SiPMHigh_Time->cd();
      // HSiPMHighRear_Time[i]->Write();
      // delete HSiPMHighRear_Time[i];
      // SiPMHighRear_TimeChannel->cd();
      // HSiPMHighRear_TimeChannel[i]->Write();
      // delete HSiPMHighRear_TimeChannel[i];
    }

    if (IsDetectorBetaLow(i))
    {
      SiPMLow_Channel->cd();
      HSiPMLow_Channel[i]->Write();
      delete HSiPMLow_Channel[i];
      // SiPMLow_Time->cd();
      // HSiPMLowRear_Time[i]->Write();
      // delete HSiPMLowRear_Time[i];
      // SiPMLowRear_TimeChannel->cd();
      // HSiPMLowRear_TimeChannel[i]->Write();
      // delete HSiPMLowRear_TimeChannel[i];
    }
  }

  Strip_Multiplicities->cd();

  TCanvas *c1 = new TCanvas("c1", "c1", 800, 800);
  HStrips_Multiplicity->Draw();
  HStripsAssociatedMultiplicity->Draw("SAME");
  c1->Write();
  HStrips_Multiplicity->Write();
  delete HStrips_Multiplicity;

  TCanvas *c2 = new TCanvas("c2", "c2", 800, 800);
  HRear_Multiplicity->Draw();
  HRearAssociatedMultiplicity->Draw("SAME");
  c2->Write();
  HRear_Multiplicity->Write();
  delete HRear_Multiplicity;

  TCanvas *c3 = new TCanvas("c3", "c3", 800, 800);
  HRearStrip_Multiplicity->Draw();
  HRearStripAssociatedMultiplicity->Draw("SAME");
  c3->Write();
  HRearStrip_Multiplicity->Write();
  delete HRearStrip_Multiplicity;

  // HRear_Detector_Multiplicity->Write();
  // delete HRear_Detector_Multiplicity;

  TCanvas *c4 = new TCanvas("c4", "c4", 800, 800);
  HStripAll->Draw();
  HStripAssociated->Draw("SAME");
  c4->Write();

  TH1D *HStripIntertripProbability = (TH1D*)HStripAssociated->Clone("HStripIntertripProbability");
  HStripIntertripProbability->Divide(HStripAll);
  HStripIntertripProbability->Write();


  HRearStripAssociated->Write();
  delete HRearStripAssociated;

  HRearStripCases->Write();
  delete HRearStripCases;

  SiPMHigh_Multiplicity->cd();
  HSiPMHigh_Multiplicity->Write();
  delete HSiPMHigh_Multiplicity;
  SiPMLow_Multiplicity->cd();
  HSiPMLow_Multiplicity->Write();
  delete HSiPMLow_Multiplicity;

  HRearStrip->Write();
  delete HRearStrip;

  HRearStripAssociated->Write();
  delete HRearStripAssociated;
  // SiPM_Multiplicities->cd();
  // HSiPM_Multiplicities->Write();
  // delete HSiPM_Multiplicities;

  // SiPM_Multiplicities->cd();
  // HSiPMHigh_False->Write();
  // delete HSiPMHigh_False;
  // HSiPMLow_False->Write();
  // delete HSiPMLow_False;
  // HSiPMHigh_Time_False->Write();
  // delete HSiPMHigh_Time_False;
  // HSiPMLow_Time_False->Write();
  // delete HSiPMLow_Time_False;
  // HSiPMHigh_SiPM_False->Write();
  // delete HSiPMHigh_SiPM_False;
  // HSiPMLow_SiPM_False->Write();
  // delete HSiPMLow_SiPM_False;

  // HSiPM_Counter_False->Fill(-1., counter_low);
  // HSiPM_Counter_False->Fill(0., counter_true);
  // HSiPM_Counter_False->Fill(1., counter_high);
  // HSiPM_Counter_False->Write();
  // delete HSiPM_Counter_False;
  return 0;
}

inline int WriteHistograms_Cleaned()
{
  File_Cleaned->cd();
  TDirectory *Strip_Channel_C = File_Cleaned->mkdir("Strip_Channel");
  TDirectory *Rear_Channel_C = File_Cleaned->mkdir("Rear_Channel");
  TDirectory *Strip_Time_C = File_Cleaned->mkdir("Strip_Time");
  TDirectory *Rear_Strip_Channel_C = File_Cleaned->mkdir("Rear_Strip_Channel");
  TDirectory *fracRear_Strip_Channel_C = File_Cleaned->mkdir("Frac_Rear_Strip_Channel");
  TDirectory *Strip_Multiplicities_C = File_Cleaned->mkdir("Strip_Multiplicities");

  TDirectory *SiPMHigh_Channel_C = File_Cleaned->mkdir("SiPMHigh_Channel");
  TDirectory *SiPMHigh_Time_C = File_Cleaned->mkdir("SiPMHigh_Time");
  TDirectory *SiPMHighRear_TimeChannel_C = File_Cleaned->mkdir("SiPMHighRear_TimeChannel");
  TDirectory *SiPMHigh_Multiplicity_C = File_Cleaned->mkdir("SiPMHigh_Multiplicity");

  TDirectory *SiPMLow_Channel_C = File_Cleaned->mkdir("SiPMLow_Channel");
  TDirectory *SiPMLow_Time_C = File_Cleaned->mkdir("SiPMLow_Time");
  TDirectory *SiPMLowRear_TimeChannel_C = File_Cleaned->mkdir("SiPMLowRear_TimeChannel");
  TDirectory *SiPMLow_Multiplicity_C = File_Cleaned->mkdir("SiPMLow_Multiplicity");

  TDirectory *SiPM_Multiplicities_C = File_Cleaned->mkdir("SiPM_Multiplicities");

  for (size_t i = 0; i < detectorNum; ++i)
  {
    if (IsDetectorSiliStrip(i))
    {
      Strip_Channel_C->cd();
      HStrip_Channel_C[i]->Write();
      delete HStrip_Channel_C[i];
      Strip_Time_C->cd();
      HStripRear_Time_C[i]->Write();
      delete HStripRear_Time_C[i];
      Rear_Strip_Channel_C->cd();
      HStripRear_Channel_C[i]->Write();
      delete HStripRear_Channel_C[i];
      fracRear_Strip_Channel_C->cd();
      HFracRearStripChannel_C[i]->Write();
      delete HFracRearStripChannel_C[i];
    }

    if (IsDetectorSiliBack(i))
    {
      Strip_Multiplicities_C->cd();
      HStripsMultiplicity_C[i]->Write();
      delete HStripsMultiplicity_C[i];
      Rear_Channel_C->cd();
      HRear_Channel_C[i]->Write();
      delete HRear_Channel_C[i];
    }

    if (IsDetectorBetaHigh(i))
    {
      SiPMHigh_Channel_C->cd();
      HSiPMHigh_Channel_C[i]->Write();
      delete HSiPMHigh_Channel_C[i];
      SiPMHigh_Time_C->cd();
      HSiPMHighRear_Time_C[i]->Write();
      delete HSiPMHighRear_Time_C[i];
      SiPMHighRear_TimeChannel_C->cd();
      HSiPMHighRear_TimeChannel_C[i]->Write();
      delete HSiPMHighRear_TimeChannel_C[i];
    }

    if (IsDetectorBetaLow(i))
    {
      SiPMLow_Channel_C->cd();
      HSiPMLow_Channel_C[i]->Write();
      delete HSiPMLow_Channel_C[i];
      SiPMLow_Time_C->cd();
      HSiPMLowRear_Time_C[i]->Write();
      delete HSiPMLowRear_Time_C[i];
      SiPMLowRear_TimeChannel_C->cd();
      HSiPMLowRear_TimeChannel_C[i]->Write();
      delete HSiPMLowRear_TimeChannel_C[i];
    }
  }

  SiPMHigh_Multiplicity_C->cd();
  HSiPMHigh_Multiplicity_C->Write();
  delete HSiPMHigh_Multiplicity_C;

  SiPMLow_Multiplicity_C->cd();
  HSiPMLow_Multiplicity_C->Write();
  delete HSiPMLow_Multiplicity_C;

  ////TCANVAS

  SiPM_Multiplicities_C->cd();
  HSiPM_Multiplicities_C->Write();
  delete HSiPM_Multiplicities_C;

  for (int i = 1; i <= BETA_SIZE; ++i)
  {
    TCanvas *canvas = new TCanvas(("SiPM_" + to_string(i)).c_str(), ("SiPM_" + to_string(i)).c_str(), 200, 10, 700, 500);
    canvas->cd();
    GSiPM_Channel_C[i]->SetTitle(("SiPM_" + to_string(i)).c_str());
    GSiPM_Channel_C[i]->SetName(("SiPM_" + to_string(i)).c_str());
    GSiPM_Channel_C[i]->Draw("AP");
    canvas->Write();
    delete canvas;

    PSiPM_Channel_C[i]->Write();
    delete PSiPM_Channel_C[i];
  }

  return 0;
}

inline int WriteTree_Grouped()
{
  GROUPED_File->cd();
  Tree_Grouped->Write();
  delete Tree_Grouped;
  return 0;
}

inline int WriteTree_Cleaned()
{
  File_Cleaned->cd();
  Tree_Cleaned->Write();

  for (size_t i = 0; i < SIGNAL_MAX; ++i)
  {
    if (IsDetectorSili(i))
    {
      Tree_Silicons[i]->Write();
      delete Tree_Silicons[i];
    }
  }

  delete Tree_Cleaned;
  return 0;
}

void ProgressBar(ULong64_t cEntry, ULong64_t TotalEntries, clock_t start, clock_t Current)
{
  Current = clock();
  const Char_t *Color;
  Double_t Frac = 1.0 * cEntry / TotalEntries;
  Double_t Timeclock = ((double)(Current - start) / CLOCKS_PER_SEC);
  Double_t TimeLeft = Timeclock * (1 / Frac - 1.);
  Color = "\e[1;31m";
  cout << Form("\r%sEntry : %9llu", Color, cEntry)
       << "/" << TotalEntries
       << " --- "
       << Form("%4.2f", 100. * cEntry / TotalEntries) << " %"
       << " --- "
       << Form("%7.00f RunEvt/sec", cEntry / Timeclock)
       << " --- "
       << " Time Left : " << Form("%2d min ", (int)TimeLeft / 60)
       << Form("%02d sec", (int)TimeLeft % 60)
       << flush;
}

// void SavingDatarouped(vector<Signal> SiliconRear, vector<Signal> SiPM_High, vector<Signal> SiPM_Low)
// {
//   Signal TrigSignal = SiliconRear[1];
//   Signal Silicon = SiliconRear[0];
//   /// Saving in Hist

//   if (Silicon.isValid)
//   {

//     HStrip_Channel[Silicon.Label]->Fill(Silicon.Channel);
//     HStripRear_Time[Silicon.Label]->Fill(Silicon.Time - TrigSignal.Time);
//     HStripRear_Channel[Silicon.Label]->Fill(TrigSignal.Channel, Silicon.Channel);
//     HFracRearStripChannel[Silicon.Label]->Fill(static_cast<double>(Silicon.Channel) / TrigSignal.Channel);

//     if (SiPM_High.size() > 0)
//       HSiPMRearHigh_TimeChannel[Silicon.Label]->Fill(TrigSignal.Time - SiPM_High[0].Time, Silicon.Channel);

//     for (auto it = SiPM_High.begin(); it != SiPM_High.end(); ++it)
//     {
//       HSiPMHigh_Channel[it->Label]->Fill(it->Channel);
//       HSiPMHighRear_Time[it->Label]->Fill(it->Time - TrigSignal.Time);
//       HSiPMHighRear_TimeChannel[it->Label]->Fill(it->Time - TrigSignal.Time, it->Channel);
//     }

//     for (auto it = SiPM_Low.begin(); it != SiPM_Low.end(); ++it)
//     {
//       HSiPMLow_Channel[it->Label]->Fill(it->Channel);
//       HSiPMLowRear_Time[it->Label]->Fill(it->Time - TrigSignal.Time);
//       HSiPMLowRear_TimeChannel[it->Label]->Fill(it->Time - TrigSignal.Time, it->Channel);
//     }

//     ////////////////////////////////////////////////////////////////////////////////////////////////////
//     // SiPM_High.erase(std::remove_if(SiPM_High.begin(), SiPM_High.end(), [](const Signal &s)
//     //                                { return GetDetectorChannel(s.Label) == 4; }),
//     //                 SiPM_High.end());
//     // SiPM_Low.erase(std::remove_if(SiPM_Low.begin(), SiPM_Low.end(), [](const Signal &s)
//     //                               { return GetDetectorChannel(s.Label) == 9; }),
//     //                SiPM_Low.end());

//     if (true) //(Silicon.Channel < 42000 && Silicon.Channel > 40000 && GetDetector(Silicon.Label) == 7)
//     {
//       vector<int> vec_det;
//       // cout << "Event : " << Event << " (Si : "<<Silicon.Channel << " )"<<endl;
//       for (auto ith = SiPM_High.begin(); ith != SiPM_High.end(); ++ith)
//       {
//         for (auto itl = SiPM_Low.begin(); itl != SiPM_Low.end(); ++itl)
//         {
//           if (GetDetectorChannel(ith->Label) == GetDetectorChannel(itl->Label))
//           {
//             // cout<<GetDetectorChannel(ith->Label)<< " : " <<ith->Channel<< "  " <<itl->Channel<< setprecision(15)<< "    TIME_DIFF : "<< ith->Time-itl->Time<<endl;
//             vec_det.push_back(GetDetectorChannel(ith->Label));
//             counter_true++;
//           }
//         }
//       }

//       // cout<<endl;
//       for (auto ith = SiPM_High.begin(); ith != SiPM_High.end(); ++ith)
//       {
//         if (std::find(vec_det.begin(), vec_det.end(), GetDetectorChannel(ith->Label)) == vec_det.end())
//         {
//           // cout<<GetDetectorChannel(ith->Label)<< " : " <<ith->Channel<< "  " <<"   -   "<< setprecision(15)<< "    TIME : "<< ith->Time - TrigSignal.Time <<" (high)"<<endl;
//           HSiPMHigh_False->Fill(ith->Channel);
//           HSiPMHigh_Time_False->Fill(ith->Time - TrigSignal.Time);
//           HSiPMHigh_SiPM_False->Fill(GetDetectorChannel(ith->Label));
//           counter_high++;
//         }
//       }

//       for (auto ith = SiPM_Low.begin(); ith != SiPM_Low.end(); ++ith)
//       {
//         if (std::find(vec_det.begin(), vec_det.end(), GetDetectorChannel(ith->Label)) == vec_det.end())
//         {
//           // cout<<GetDetectorChannel(ith->Label)<< " : " <<ith->Channel<< "  " <<"   -   "<< setprecision(15)<< "    TIME : "<< ith->Time - TrigSignal.Time <<" (low)"<<endl;
//           HSiPMLow_False->Fill(ith->Channel);
//           HSiPMLow_Time_False->Fill(ith->Time - TrigSignal.Time);
//           HSiPMLow_SiPM_False->Fill(GetDetectorChannel(ith->Label));
//           counter_low++;
//         }
//       }
//       // cout << "-----------------------------------" << endl;
//     }
//     ////////////////////////////////////////////////////////////////////////////////////////////////////

//     HSiPMHigh_Multiplicity->Fill(SiPM_High.size());
//     HSiPMLow_Multiplicity->Fill(SiPM_Low.size());
//     HSiPM_Multiplicities->Fill(SiPM_High.size(), SiPM_Low.size());
//   }

//   else
//   {
//     //////TO DO
//     // Analyse no-coincidence
//   }

//   /// Saving in Tree
//   if (Silicon.isValid)
//   {

//     Event++;
//     Tree_Event = Event;
//     Tree_Silicon = SiliconRear;
//     Tree_SiPMHigh = SiPM_High;
//     Tree_SiPMLow = SiPM_Low;
//     Tree_Grouped->Fill();
//   }
// }

// void SavingData_Cleaned(vector<Signal> SiliconRear, vector<Signal> SiPM_High, vector<Signal> SiPM_Low)
// {
//   Signal TrigSignal = SiliconRear[1];
//   Signal Silicon = SiliconRear[0];
//   /// Saving in Hist
//   double Total = 0;

//   if (Silicon.isValid)
//   {
//     HStrip_Channel_C[Silicon.Label]->Fill(Silicon.Channel);
//     HRear_Channel_C[TrigSignal.Label]->Fill(TrigSignal.Channel);
//     HStripRear_Time_C[Silicon.Label]->Fill(Silicon.Time - TrigSignal.Time);
//     HStripRear_Channel_C[Silicon.Label]->Fill(TrigSignal.Channel, Silicon.Channel);
//     HFracRearStripChannel_C[Silicon.Label]->Fill(static_cast<double>(Silicon.Channel) / TrigSignal.Channel);

//     for (auto it = SiPM_High.begin(); it != SiPM_High.end(); ++it)
//     {
//       HSiPMHigh_Channel_C[it->Label]->Fill(it->Channel);
//       HSiPMHighRear_Time_C[it->Label]->Fill(it->Time - TrigSignal.Time);
//       HSiPMHighRear_TimeChannel_C[it->Label]->Fill(it->Time - TrigSignal.Time, it->Channel);
//     }

//     for (auto it = SiPM_Low.begin(); it != SiPM_Low.end(); ++it)
//     {
//       HSiPMLow_Channel_C[it->Label]->Fill(it->Channel);
//       HSiPMLowRear_Time_C[it->Label]->Fill(it->Time - TrigSignal.Time);
//       HSiPMLowRear_TimeChannel_C[it->Label]->Fill(it->Time - TrigSignal.Time, it->Channel);
//     }

//     HSiPMHigh_Multiplicity_C->Fill(SiPM_High.size());
//     HSiPMLow_Multiplicity_C->Fill(SiPM_Low.size());
//     HSiPM_Multiplicities_C->Fill(SiPM_High.size(), SiPM_Low.size());

//     for (auto ith = SiPM_High.begin(); ith != SiPM_High.end(); ++ith)
//     {
//       for (auto itl = SiPM_Low.begin(); itl != SiPM_Low.end(); ++itl)
//       {
//         if (GetDetectorChannel(ith->Label) == GetDetectorChannel(itl->Label))
//         {
//           GSiPM_Channel_C[GetDetectorChannel(ith->Label)]->SetPoint(counterraph[GetDetectorChannel(ith->Label)], itl->Channel, ith->Channel);
//           PSiPM_Channel_C[GetDetectorChannel(ith->Label)]->Fill(itl->Channel, ith->Channel);
//           counterraph[GetDetectorChannel(ith->Label)]++;
//         }
//       }
//     }
//   }

  

//   else
//   {
//     //////TO DO
//     // Analyse no-coincidence
//   }
// }

// Signal ProcessSilicon(vector<Signal> Signal_Vector, Signal Trigger)
// {
//   vector<Signal> Output_Vector = vector<Signal>();
//   /// Search in Signal Vector between 1 and n
//   for (auto current = Signal_Vector.begin(); current != Signal_Vector.end(); ++current)
//   {
//     if (current->Time - Trigger.Time < winSiliMax && Trigger.Time - current->Time > winSiliMin && IsSameSiliDetector(Trigger.Label, current->Label) && Trigger != *current) //&& current->Channel < 42000 && current->Channel > 40000)
//     {
//       Output_Vector.push_back(*current);
//     }
//   }

//   if (Output_Vector.size() != 1)
//   {
//     if (Output_Vector.size() == 2)
//     {
//       if (Output_Vector[0].Label < Output_Vector[1].Label)
//         HStripsMultiplicity[Trigger.Label]->Fill(GetDetectorChannel(Output_Vector[0].Label), GetDetectorChannel(Output_Vector[1].Label));
//       else
//         HStripsMultiplicity[Trigger.Label]->Fill(GetDetectorChannel(Output_Vector[1].Label), GetDetectorChannel(Output_Vector[0].Label));
//     }

//     return Signal();
//   }

//   return Output_Vector[0];
// }

// vector<Signal> ProcessSiPM(vector<Signal> Signal_Vector, Signal Trigger)
// {
//   vector<Signal> Output_Vector = vector<Signal>();

//   /// Search in Signal Vector between 1 and n
//   for (auto current = Signal_Vector.begin(); current != Signal_Vector.end(); ++current)
//   {
//     if (current->Time - Trigger.Time < winHighMax && current->Time - Trigger.Time > winHighMin)
//     {
//       Output_Vector.push_back(*current);
//     }
//   }

//   return Output_Vector;
// }

void SearchForCoincidence(TTreeReaderArray<Signal> &signals)
{
  if (Verbose > 0)
    cout << "### Starting a Coincidence group on " << detectorName[signals[0].Label] << "  TIME : " << signals[0].Time << endl;

  vector<int> Rear_Position;
  vector<int> Strip_Position;
  vector<int> SiPM_High_Position;
  vector<int> SiPM_Low_Position;

  for (int index = 0; index < signals.GetSize(); index++)
  {
    int current_label = signals[index].Label;
    if (IsDetectorSiliBack(current_label))
    {
      Rear_Position.push_back(index);
      HRear_Channel[current_label]->Fill(signals[index].Channel);
    }
    else if (IsDetectorSiliStrip(current_label))
    {
      Strip_Position.push_back(index);
      HStrip_Channel[current_label]->Fill(signals[index].Channel);
    }
    else if (IsDetectorBetaHigh(current_label))
    {
      SiPM_High_Position.push_back(index);
      HSiPMHigh_Channel[current_label]->Fill(signals[index].Channel);
    }
    else if (IsDetectorBetaLow(current_label))
    {
      SiPM_Low_Position.push_back(index);
      HSiPMLow_Channel[current_label]->Fill(signals[index].Channel);
    }
  }

  //////////CONTROL PLOT ALL REAR STRIP ///////////////
  for (int index = 0; index < Strip_Position.size(); index++)
  {
    for (int jndex = 0; jndex < Rear_Position.size(); jndex++)
    {
      HRearStrip->Fill(signals[Strip_Position[index]].Label, signals[Rear_Position[jndex]].Label);
    }
  }
  /////////////////////////////////////////////////////

  ///////// SELECTING EVENT WITH STRIP/REAR ASSOCIATION ONE SAME DET///////////
  vector<bool> Rear_associated(Rear_Position.size(), false);
  vector<bool> Strip_associated(Strip_Position.size(), false);
  vector<pair<Signal, Signal>> RearStrip;

  for (int index = 0; index < Strip_Position.size(); index++)
  {
    for (int jndex = 0; jndex < Rear_Position.size(); jndex++)
    {
      if (IsSameSiliDetector(signals[Strip_Position[index]].Label, signals[Rear_Position[jndex]].Label))
      {
        Strip_associated[index] = true;
        Rear_associated[jndex] = true;
        RearStrip.push_back(make_pair(signals[Rear_Position[jndex]], signals[Strip_Position[index]]));
      }
    }
  }

  int Final_Rear_associated = 0;
  for (bool associated : Rear_associated)
  {
    if (associated)
    {
      Final_Rear_associated++;
    }
  }

  int Final_Strip_associated = 0;
  for (bool associated : Strip_associated)
  {
    if (associated)
    {
      Final_Strip_associated++;
    }
  }

  HStripsAssociatedMultiplicity->Fill(Final_Strip_associated);
  HRearAssociatedMultiplicity->Fill(Final_Rear_associated);
  HRearStripAssociatedMultiplicity->Fill(Final_Rear_associated, Final_Strip_associated);

  //////////CONTROL PLOT ALL REAR STRIP ///////////////
  for (int index = 0; index < Strip_Position.size(); index++)
  {
    for (int jndex = 0; jndex < Rear_Position.size(); jndex++)
    {
      if (IsSameSiliDetector(signals[Strip_Position[index]].Label, signals[Rear_Position[jndex]].Label))
      HRearStripAssociated->Fill(signals[Strip_Position[index]].Label, signals[Rear_Position[jndex]].Label);
    }
  }
  /////////////////////////////////////////////////////

  ///// CASE A : ONE REAR AND ONE STRIP ASSOCIATED ///////
  if (RearStrip.size() == 1)
  {
    HRearStripCases->Fill(1);
  }

   /////// CASE B : ONE REAR AND MULIPLE STRIP ASSOCIATED ///////
    // CASE B1 : INTERSTRIP 
    // CASE B2 : ?

  if (Final_Rear_associated == 1 && Final_Strip_associated > 1)
  {
    HRearStripCases->Fill(2);
    if (IsDetectorSiliInterStrip(RearStrip[1].second.Label, RearStrip[0].second.Label))
    {
      HRearStripCases->Fill(3);
    }
    else
    {
      HRearStripCases->Fill(4);
    }
  }
  // /////// CASE C : MULTIPLE REAR AND ONE STRIP ASSOCIATED ///////

  if (Final_Rear_associated > 1 && Final_Strip_associated == 1)
  {
    HRearStripCases->Fill(5);
  }

  /////// CASE D : MULTIPLE REAR AND MULTIPLE STRIP ASSOCIATED ONE SAME DET ///////

  if (Final_Rear_associated > 1 && Final_Strip_associated > 1)
  {
    HRearStripCases->Fill(6);
  }


  ////// MULLTISTRIP AND INTERSTRIP PROBABILITY //////

  for (int jndex = 0; jndex < Strip_associated.size(); jndex++)
  {
    if (Strip_associated[jndex] && Strip_associated.size() > 1 && Rear_associated.size() == 1)
    {
      HStripAssociated->Fill(GetDetectorChannel(signals[Strip_Position[jndex]].Label));
    }
    HStripAll->Fill(GetDetectorChannel(signals[Strip_Position[jndex]].Label));
  }

  HRear_Multiplicity->Fill(Rear_Position.size());
  HStrips_Multiplicity->Fill(Strip_Position.size());
  HRearStrip_Multiplicity->Fill(Rear_Position.size(), Strip_Position.size());
  HSiPMLow_Multiplicity->Fill(SiPM_Low_Position.size());
  HSiPMHigh_Multiplicity->Fill(SiPM_High_Position.size());


  // HStripsRearSameDetMultiplicity->Fill(Strip_Position.size(), counter);

  Rear_Position.clear();
  Strip_Position.clear();
  SiPM_High_Position.clear();
  SiPM_Low_Position.clear();
  
  // // Triger variables
  // Signal TrigSignal = Signal(*Labels, *Times, *Channels);
  // int TrigEntry = Reader->GetCurrentEntry();

  // // Searching the first event of the group
  // int counter = 0;
  // while (*Times >= TrigSignal.Time + winTotalMin && TrigEntry - counter > 0)
  // {
  //   counter++;
  //   Reader->SetEntry(TrigEntry - counter);
  // }

  // // Starting at the first event of the group
  // int GroupEntry = TrigEntry - counter + 1;
  // Reader->SetEntry(GroupEntry);

  // while (*Times <= TrigSignal.Time + winTotalMax && Reader->GetCurrentEntry() < Reader->GetEntries())
  // {
  //   Signal current = Signal(*Labels, *Times, *Channels); /// Current Signal
  //   if (IsDetectorSili(*Labels))
  //   {
  //     SiSignals.push_back(current);
  //   }
  //   if (IsDetectorBetaLow(*Labels))
  //   {
  //     SiPMSignalsLow.push_back(current);
  //   }
  //   else if (IsDetectorBetaHigh(*Labels))
  //   {
  //     SiPMSignalsHigh.push_back(current);
  //   }

  //   Reader->Next();
  // }

  // int EndofGroup = Reader->GetCurrentEntry();
  // Reader->SetEntry(EndofGroup - 1);

  // ////Raw Save

  // /// Selecting Signals in time window
  // Signal Silicon = ProcessSilicon(SiSignals, TrigSignal);              /// Time Window + single silicon signal on same detector
  // vector<Signal> SiPM_High = ProcessSiPM(SiPMSignalsHigh, TrigSignal); /// Time Window
  // vector<Signal> SiPM_Low = ProcessSiPM(SiPMSignalsLow, TrigSignal);   /// Time Window

  // vector<Signal> SiliconRear = {Silicon, TrigSignal};

  // SavingDatarouped(SiliconRear, SiPM_High, SiPM_Low);
}

void InitCleaning()
{
  for (size_t i = 0; i < detectorNum; ++i)
  {
    if (IsDetectorSiliStrip(i))
    {
      TH1D *H = (TH1D *)GROUPED_File->Get(("Frac_Rear_Strip_Channel/HFracRearStripChannel_" + detectorName[i]).c_str());
      H->GetXaxis()->SetRangeUser(1.0, 1.5);

      detectorCleaning[i] = make_pair(H->GetBinCenter(H->GetMaximumBin()), H->GetRMS());
    }
  }
}

#endif