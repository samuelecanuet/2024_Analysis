#include "Grouper.hh"
#include <ctime>

int main(int argc, char *argv[])
{
    clock_t start = clock(), Current;
    string Run_string;

    if (argc == 1)
    {
        Error("No Run Number Given");
        exit(0);
    }
    else
    {
        Run = atoi(argv[1]);
        if (Run < 100)
            Run_string = "0" + to_string(Run);
        else
            Run_string = to_string(Run);
    }

    Info("Current Run : " + Run_string);
    ///////////////////////////////////  INPUT ///////////////////////////////////
    ROOT_filename = SearchFiles(DIR_ROOT_DATA, Run_string);
    ROOT_basefilename = ROOT_filename.substr(0, ROOT_filename.find(".root"));

    TFile *ROOT_File = new TFile((DIR_ROOT_DATA+ROOT_filename).c_str(), "READ");
    TTree *Tree = (TTree *)ROOT_File->Get("Tree_Group");
    TTreeReader *Reader = new TTreeReader(Tree);
    TTreeReaderArray<Signal> signals(*Reader, "Signal");

    // ///////////////////////////////////  DELETE OLD FILE ///////////////////////////////////
    // int status = remove((dirNameGrouped+baseFileName+"_grouped.root").c_str());
    // status = remove((dirNameCleaned+baseFileName+"_cleaned.root").c_str());

    ///////////////////////////////////  Grouped ///////////////////////////////////
    GROUPED_File = new TFile((DIR_ROOT_DATA_GROUPED+ROOT_basefilename+"_grouped.root").c_str(), "RECREATE");
    
    ///////////////////////////////////  INITIALISATION ///////////////////////////////////
    InitDetectors("Config_Files/sample.pid");

    InitHistograms_Grouped();
    InitTree_Grouped();
    
    ///////////////////////////////////  PROCESSING TREE ///////////////////////////////////
    Verbose = 0;
    ULong64_t TotalEntries = Tree->GetEntries();
    while (Reader->Next())
    {
        ProgressBar(Reader->GetCurrentEntry(), TotalEntries, start, Current, "Creating Groups : ");
        
        if (Verbose > 0)
        {
            for (int i = 0; i < signals.GetSize(); i++)
            {
                cout << signals[i] << endl;
            }
        }

        SearchForCoincidence(signals);    
    }
    cout << "\n" <<"\e[0m" << flush ;

    cout << "writting " << endl;
    WriteHistograms_Grouped();
    // WriteTree_Grouped();
    // WriteTime(ROOT_File, GROUPED_File);
    GROUPED_File->Close();
    ROOT_File->Close();
    cout << "Grouped File Created" << endl;

//     ///////////////////////////////////  CLEANING ///////////////////////////////////
//     GROUPED_File = new TFile((dirNameGrouped+baseFileName+"_grouped.root").c_str(), "READ");
//     File_Cleaned = new TFile((dirNameCleaned+baseFileName+"_cleaned.root").c_str(), "RECREATE");
//     WriteTime(GROUPED_File, File_Cleaned);
//     Tree_Grouped = (TTree *)GROUPED_File->Get("Tree");
//     GLogMessage("<SAM> Cleaning Proton Spectrum : ");
//     InitCleaning();
//     TTreeReader *Grouped_Reader = new TTreeReader(Tree_Grouped);
//     TTreeReaderArray<Signal> Grouped_Silicon(*Grouped_Reader, "Tree_Silicon");
//     TTreeReaderArray<Signal> Grouped_SiPMHigh(*Grouped_Reader, "Tree_SiPMHigh");
//     TTreeReaderArray<Signal> Grouped_SiPMLow(*Grouped_Reader, "Tree_SiPMLow");

//     InitHistograms_Cleaned();
//     InitTree_Cleaned();

//     Tree_Grouped->SetBranchAddress("Tree_Silicon", &Tree_Cleaned_Silicon);
//     Tree_Grouped->SetBranchAddress("Tree_SiPMHigh", &Tree_Cleaned_SiPMHigh);
//     Tree_Grouped->SetBranchAddress("Tree_SiPMLow", &Tree_Cleaned_SiPMLow);

//     TotalEntries = Tree_Grouped->GetEntries();
//     Event = 0;
//     double sigma_acceptance = 3;
//     while(Grouped_Reader->Next())
//     {
//         ULong64_t cEntry = Grouped_Reader->GetCurrentEntry();
//         if (cEntry%10000 == 0 && cEntry > 10000)
//         {
//             ProgressBar(cEntry, TotalEntries, start, Current, "");
//         }
        
//         double min = detectorCleaning[Grouped_Silicon[0].Label].first - sigma_acceptance*detectorCleaning[Grouped_Silicon[0].Label].second;
//         double max = detectorCleaning[Grouped_Silicon[0].Label].first + sigma_acceptance*detectorCleaning[Grouped_Silicon[0].Label].second;
//         double frac = static_cast<double>(Grouped_Silicon[0].Channel)/Grouped_Silicon[1].Channel;
//         if ( frac > min && frac < max)
//         {   
//             Tree_Grouped->GetEntry(cEntry);
//             SavingData_Cleaned(*Tree_Cleaned_Silicon, *Tree_Cleaned_SiPMHigh, *Tree_Cleaned_SiPMLow);


//             ////FOR STRIP
//             Tree_Channel = Grouped_Silicon[0].Channel;
//             Tree_Silicons[Grouped_Silicon[0].Label]->Fill();
//             ////FOR REAR
//             Tree_Channel = Grouped_Silicon[1].Channel;
//             Tree_Silicons[Grouped_Silicon[1].Label]->Fill();

//             Tree_Cleaned->Fill();
//         }
//     }
//     cout << "\n" <<"\e[0m" << flush ;

//     WriteHistograms_Cleaned();
//     WriteTree_Cleaned();
//     File_Cleaned->Close();
//     GROUPED_File->Close();
}
